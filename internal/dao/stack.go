// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"context"
	"xompose/internal/dao/internal"
	"xompose/internal/model"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/os/gtime"
)

// stackDao is the data access object for the table stack.
// You can define custom methods on it to extend its functionality as needed.
type stackDao struct {
	*internal.StackDao
}

var (
	// Stack is a globally accessible object for table stack operations.
	Stack = stackDao{internal.NewStackDao()}
)

// Add your custom methods and functionality below.
// GetByName 根据名称获取 stack 内容
func (d *stackDao) GetByName(ctx context.Context, name string) (*model.StackModel, error) {
	var item *model.StackModel
	if err := d.Ctx(ctx).
		Where(d.Columns().StackName, name).
		Scan(&item); err != nil {
		return nil, err
	}

	return item, nil
}

// DeleteByName 根据名称删除 stack 内容
func (d *stackDao) DeleteByName(ctx context.Context, name string) error {
	updater := g.Map{
		d.Columns().DeletedAt: gtime.Now().Unix(),
	}
	if _, err := d.Ctx(ctx).
		Where(d.Columns().StackName, name).
		UpdateAndGetAffected(updater); err != nil {
		return err
	}

	return nil
}

func (d *stackDao) ListAll(ctx context.Context) ([]*model.StackModel, error) {
	var items []*model.StackModel
	if err := d.Ctx(ctx).
		Scan(&items); err != nil {
		return nil, err
	}

	return items, nil
}

// UpdateStackStatus 更新 stack 状态
func (d *stackDao) UpdateStackStatus(ctx context.Context, name string, status model.StackStatus) error {
	updater := g.Map{
		d.Columns().StackStatus: status,
	}
	if _, err := d.Ctx(ctx).
		Where(d.Columns().StackName, name).
		UpdateAndGetAffected(updater); err != nil {
		return err
	}

	return nil
}
